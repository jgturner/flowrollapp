// Production-ready Mux service using Mux MCP for video uploads and asset management

export interface MuxThumbnail {
  time: number;
  url: string;
}

export class MuxService {
  private static instance: MuxService;

  private constructor() {}

  public static getInstance(): MuxService {
    if (!MuxService.instance) {
      MuxService.instance = new MuxService();
    }
    return MuxService.instance;
  }

  /**
   * Generate thumbnail URLs for a playback ID
   * These are generated by Mux at different timestamps
   */
  generateThumbnails(playbackId: string): MuxThumbnail[] {
    const timestamps = [0, 10, 20, 30, 45, 60];
    return timestamps.map(time => ({
      time,
      url: `https://image.mux.com/${playbackId}/thumbnail.jpg?width=320&time=${time}`
    }));
  }

  /**
   * Get video playback URL for a playback ID
   */
  getPlaybackUrl(playbackId: string): string {
    return `https://stream.mux.com/${playbackId}.m3u8`;
  }

  /**
   * Get MP4 download URL for a playback ID (if available)
   */
  getMp4Url(playbackId: string): string {
    return `https://stream.mux.com/${playbackId}/high.mp4`;
  }

  /**
   * Get animated GIF from video segment
   */
  getAnimatedThumbnail(playbackId: string, time: number, width: number = 320): string {
    return `https://image.mux.com/${playbackId}/animated.gif?width=${width}&time=${time}`;
  }

  /**
   * Get storyboard (multiple thumbnails in one image)
   */
  getStoryboard(playbackId: string, width: number = 640): string {
    return `https://image.mux.com/${playbackId}/storyboard.jpg?width=${width}`;
  }
}

// Export singleton instance
export const muxService = MuxService.getInstance();

// Note: Upload creation and status checking are now handled directly in the API routes
// using the Mux MCP for real-time integration with Mux's infrastructure.
